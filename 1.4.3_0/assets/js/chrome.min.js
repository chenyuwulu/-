manifest = get_manifest();
var sync_session_id = false;
var trytime = 10;
var api_urls = [];
api_urls.push('https://www.chromehelper.net');
api_urls.push('https://www.speedstunnel.com');
api_urls.push('https://www.ghelper.org');
api_urls.push('https://ipv6.chromehelper.net');
api_urls.push('https://cdn.speedstunnel.com');
api_urls.push('https://global.speedstunnel.com');

function notify(title, options = {}) {
  return new Notification(title, options);
}

function set_proxy(proxy_pac_key, conf) {
  console.log('设置proxy的时候',conf)
  chrome.proxy.settings.set(conf, function () {
    set_proxy_pac_key(proxy_pac_key);
  });
}

function get_local_data() {
  var data = {};
  data['gtoken'] = get_token();//获取到存在本地存储里的token
  data['version'] = manifest.version;//获取到清单列表里的版本号
  data['proxy_pac_key'] = get_proxy_pac_key();//获取到存在本地存储里的proxy的key
  data['api_url'] = get_api_url();//获取到存在本地存储里的能访问api的链接
  data['lang'] = get_client_lang();//获取到你当前浏览器里的语言
  data['client_id'] = get_client_id();//获取到当前扩展插件在浏览器里的ID
  data['time'] = get_time();//获取到当前的以秒为单位的时间戳
  return data; //返回所获取到的数据
}//获取存在本地存储里的数据

function lang(name) {
  return chrome.i18n.getMessage(name);
}

function alert_dump(data) {
  alert(JSON.stringify(data));
}

function get_request_uri(default_url) {
  var uri = window.location.href;//获取当前地址栏的地址，一般都是chrome带头的本地绝对地址
  var off = uri.indexOf('?');
  if (off < 0) {
    return default_url;
  }
  return uri.slice(off + 1);
}//获取到？后面的参数

function getQueryVars(uri) {
  if (uri.indexOf('?') < 0) {
    return {}
  }//如果没有问号则返回空
  var vars = {};
  var query = uri.slice(uri.indexOf('?') + 1).split('&');
  for (val in query) {
    q = query[val].split('=');
    vars[q[0]] = q[1];
  }
  return vars;
}

function purl(path, up = false) {
  if (up) { //如果传入的up为true
    var api_url = api_urls.shift(); //此时api_url是https://www.chromehelper.net这个内容
    set_api_url(api_url);//在本地存储空间内存入一个name是api_url，value是https://www.chromehelper.net
    api_urls.push(api_url);//在数组末尾加上原先被删除掉的第一个元素
  }//这个IF判断就是把第一个元素放到最后一个，顺便在本地存储里面放一个
  var api_url = get_api_url();
  if (!api_url) {
    return purl(path, true);
  }//截至到这里为止，就是把所有网站都试一遍
  var query = get_local_data();//获取到存在本地存储里的所有data
  var pquery = getQueryVars(path);//把api后面的各个参数都拿出来
  for (k in pquery) {
    query[k] = pquery[k];
  }
  path = path.split('?')[0];
  return api_url + path + '?' + $.param(query);
}//获取一个可用的api，并且将参数带在后面

function get_time() {
  var date = new Date();
  return (date.getTime() / 1000);
}// 获取一个以秒为单位的当前时间戳

function get_client_id() {
  return chrome.runtime.id;
}//获取当前这个扩展插件在浏览器里面的ID

function get_token() {
  return localStorage.getItem('token');
}//获取存在本地存储里的token

function set_token(token) {
  return localStorage.setItem('token', token);
}//设置一个在本地存储里的token

function set_proxy_pac_key(proxy_pac_key) {
  localStorage.setItem('proxy_pac_key', proxy_pac_key);
}//设置一个在本地存储里的proxy_pac_key

function get_proxy_pac_key() {
  return localStorage.getItem('proxy_pac_key');
}//获取本地存储里的proxy_pac_key

function set_api_url(api_url) {
  localStorage.setItem('api_url', api_url);
  //设置一个本地存储对，name是api_url，value是传入的这个参数
}//获取存在本地存储里的api_url

function get_api_url() {
  return localStorage.getItem('api_url');
}//设置一个在本地存储里的api_url

function get_client_lang() {
  return window.navigator.language;
}//返回你当前浏览器的语言

function get_manifest() {
  return chrome.runtime.getManifest();
}//获取到你当前扩展插件的配置清单也就是manifest

function handle(data) {
  if (data.headers) {
    if (data.headers.sync_time) {
      set_sync_time(data.headers.sync_time);
    }
    if (data.headers.set_token) {
      set_token(data.headers.set_token);
    }
    if (data.headers.test_server) {
      test_server(data.headers.test_server);
    }
    if (data.headers.set_proxy && data.headers.proxy_pac_key) {
      set_proxy(data.headers.proxy_pac_key, data.headers.set_proxy);
    }
    if (data.headers.notify) {
      notify(data.headers.notify.title, data.headers.notify.options);
    }
    if (data.headers.open_tab) {
      chrome.tabs.create(data.headers.open_tab, function () {});
    }
    if (data.headers.location) {
      window.location = data.headers.location;
    }
  }
  if (data.html) {
    for (tag in data.html) {
      $(tag).html(data.html[tag]);
    }
    handle_html();
  }
}//处理返回的ajax返回的数据

function handle_html() {
  $('form').submit(function () {
    var url = $(this).attr('action');
    var data = $(this).serialize();
    request(url, 'POST', data, false);
    return false;
  });
  $('.ajax').click(function () {
    var url = $(this).attr('href');
    request(url, 'GET', null, false);
    return false;
  });
}//此方法内包含了通过form提交的和通过ajax提交的时候所触发的方法

function session(action = 'reload', async = true, up = false, tn = 1) {
  var data = false;
  if (tn >= trytime) {
    return data;
  }
  var pdata = get_local_data();
  var url = purl('/server/session', up);
  pdata['action'] = action;
  var conf = {};
  conf['url'] = url;
  conf['type'] = 'POST';
  conf['async'] = async;
  conf['cache'] = false;
  conf['timeout'] = 10000;
  conf['data'] = pdata;
  conf['success'] = function (res) {
    handle(res);
    data = res;
  }
  conf['error'] = function (err) {
    data = session(action, async, true, tn + 1);
  }
  $.ajax(conf);
  return data;
}

function clearSync() {
  if (sync_session_id) {
    clearInterval(sync_session_id);
  }
}

function set_sync_time(sync_time = 3600000) {
  clearSync();
  sync_session_id = setInterval(function () {
    if (get_proxy_pac_key()) {
      session('reload');
    } else {
      if (session('start', false)) {}
    }
  }, sync_time);
}

function request(url, method = "GET", data = null, async = true, up = false, tn = 1, callfunc = null) {
  var conf = {};
  conf['url'] = purl(url, up);//获取到可用的api并且将参数带在后面
  if (data) {
    conf['data'] = data;
  }//如果有data的话就附带上data
  conf['type'] = method;//type是GET
  conf['cache'] = false;//缓存是无
  conf['timeout'] = 10000;//时间10秒
  conf['async'] = async;//同步
  conf['success'] = function (res) {
    handle(res);
    console.log('获取当前返回的数据',res)
    callfunc && callfunc();
  }
  conf['error'] = function (err) {
    if (tn >= trytime) {
      error_html(err);
    } else {
      return request(url, method, data, async, true, tn + 1, callfunc);
    }
  }//如果返回error，提示error信息并再次请求
  $.ajax(conf);
} //封装的ajax请求

function start() {
  set_proxy_pac_key('');
  set_api_url('');
  if (session('start', false)) {} else {
    notify('启动失败.');
    set_sync_time(30000);
  }
}

function error_html(err) {
  var html = '<div class="container">';
  html += '<div class="alert alert-danger error"  role="alert">';
  html += '<h1><i class="glyphicon glyphicon-warning-sign"></i></h1>';
  html += '<h3>' + lang('error_code') + ' : ' + err.status + '</h3>';
  html += '<h4>' + lang('error_network') + '</h4>';
  html += '<h5><a href="error.html" target="_blank" class="btn btn-warning">' + lang('error_button') + '</a></h5>';
  html += '</div></div>';
  $('body').html(html);
}//当有返回error的信息的时候调用次方法来显示

function test_speed(conf) {
  var start = get_time();
  var url = conf.test_url;
  var post_url = conf.post_url;;
  $.get(url, function () {
    var end = get_time();
    conf['start'] = start;
    conf['end'] = end;
    conf['speed'] = end - start;
    $.post(post_url, conf, function (res) {
      handle(res);
    });
  });
}

function test_server(servers) {
  for (val in servers) {
    test_speed(servers[val]);
  }
}